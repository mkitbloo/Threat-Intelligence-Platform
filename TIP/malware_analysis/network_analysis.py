from .files import Files
from scapy.layers.inet import IP, TCP
from scapy.layers.l2 import LLC
from scapy.layers.l2 import Ether
from scapy.utils import rdpcap
import statistics
import networkx as nx
from pyvis.network import Network
from django.conf import settings


class NetworkAnalysis:
    def __init__(self, file):
        file = Files(file)
        self.packets = file.parse_file()
        print(self.packets)

    def traffic_graph(self):
        '''
        Create a graph of the traffic flow between endpoints.
        '''
        G = nx.DiGraph()

        for packet in self.packets:
            # add the source and destination IP addresses to the graph
            G.add_node(packet[IP].src)
            G.add_node(packet[IP].dst)

            # add the edge between the source and destination IP addresses
            G.add_edge(packet[IP].src, packet[IP].dst)
                
        return G

    def detect_domain_generation_algorithm(self):
        '''
        Detect DGA malware where the DNS requests are generated algorithmically without human intervention.
        '''
        mean = statistics.mean([len(packet) for packet in self.packets])
        std_dev = statistics.stdev([len(packet) for packet in self.packets])
        threshold = mean + 3 * std_dev

        counts = {}
        for packet in self.packets:
            if packet.haslayer(DNS) and packet[DNS].qr == 1 and packet[DNS].ancount == 0:
                ip = packet[IP].dst
                counts[ip] = counts.get(ip, 0) + 1

        suspicious_ips = []
        for ip, count in counts.items():
            if count < threshold:
                continue
            suspicious_ips.append(ip)

        return suspicious_ips, counts

    def network_overview(self):
        '''
        build a network overview of the traffic flow between endpoints using pyvis
        '''

        net = Network(height='750px', width='100%', bgcolor='#222222', font_color='white', select_menu=True, filter_menu=True)

        net.from_nx(self.traffic_graph())

        # dynamically tweak the physics of the graph
        net.toggle_physics(True)

        net.show_buttons(filter_=['physics'])
        
        # save the html template to a file
        return net.generate_html()

    def generate_report(self):
        '''
        Generate a report of the network traffic.
        '''
        suspicious_ips, counts = self.detect_domain_generation_algorithm()

        report = {
            'suspicious_ips': suspicious_ips,
            'counts': counts
        }

        return report
